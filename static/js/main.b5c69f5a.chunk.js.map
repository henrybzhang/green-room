{"version":3,"sources":["providers/InventoryProvider.jsx","components/Inventory.jsx","providers/ActionProvider.jsx","components/ActionButton.jsx","components/ActionButtonGroup.jsx","components/EventLog.jsx","images/1.jpeg","images/2.jpeg","images/3.jpeg","images/4.jpeg","images/5.gif","images/6.gif","providers/BackgroundProvider.jsx","App.jsx","index.jsx"],"names":["InventoryContext","createContext","InventoryProvider","children","useState","playerItems","setPlayerItems","playerStructures","setPlayerStructures","Provider","value","addItem","itemName","amount","Inventory","useContext","className","Object","entries","map","ActionContext","initialActions","pickUpTrash","landTrashItems","riverTrashItems","actionKeySet","Set","ActionProvider","currentAction","setCurrentAction","availableActions","setAvailableActions","playerActionCount","setPlayerActionCount","environmentLevel","setEnvironmentLevel","useEffect","has","Error","Math","floor","random","length","recycler","airFilter","net","bridge","playerAction","e","console","log","metal","buildRecycler","trash","useRecycler","plastic","wood","buildAirFilter","buildNet","useNet","buildBridge","newEnvironmentLevel","ActionButton","actionName","actionText","type","onClick","ActionButtonGroup","EventLog","eventLog","setEventLog","eventText","BackgroundContext","BackgroundProvider","background1","backgroundImage","setBackgroundImage","background2","background3","background4","background5","background6","App","style","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.b5c69f5a.chunk.js","sourcesContent":["import React, { createContext, useState } from 'react';\n\nconst InventoryContext = createContext();\n\nfunction InventoryProvider({ children }) {\n  const [playerItems, setPlayerItems] = useState({});\n\n  const [playerStructures, setPlayerStructures] = useState({});\n\n  const addItem = (itemName, amount) => {\n    if (itemName in playerItems) {\n      setPlayerItems({\n        ...playerItems,\n        [itemName]: playerItems[itemName] + amount,\n      });\n    } else {\n      setPlayerItems({\n        ...playerItems,\n        [itemName]: amount,\n      });\n    }\n  };\n\n  return (\n    <InventoryContext.Provider\n      value={{\n        playerItems,\n        playerStructures,\n        setPlayerStructures,\n        addItem,\n      }}\n    >\n      {children}\n    </InventoryContext.Provider>\n  );\n}\n\nexport { InventoryContext, InventoryProvider };\n","import { useContext } from 'react';\nimport { InventoryContext } from '../providers/InventoryProvider';\nimport '../styles/Inventory.css';\n\nfunction Inventory() {\n  const { playerItems } = useContext(InventoryContext);\n\n  return (\n    <fieldset className=\"invent\">\n      <legend>Collection</legend>\n      {Object.entries(playerItems).map(([itemName, amount]) => (\n        <div className=\"invent-items\">\n          <div>\n            {itemName}\n            :&nbsp;\n          </div>\n          <div className=\"invent-item-two\">{amount}</div>\n        </div>\n      ))}\n    </fieldset>\n  );\n}\n\nexport default Inventory;\n","import React, {\n  createContext, useState, useEffect, useContext,\n} from 'react';\nimport { InventoryContext } from './InventoryProvider';\n\nconst ActionContext = createContext();\n\nconst initialActions = {\n  pickUpTrash: 'Pick up trash',\n};\n\nconst landTrashItems = ['trash', 'wood', 'metal', 'plastic'];\nconst riverTrashItems = ['trash', 'plastic'];\n\nconst buildActions = {\n  recycler: 'Fix recycler',\n  net: 'build net',\n  waterFilter: 'build waterFilter',\n  airFilter: 'build airFilter',\n  // 'workshop': 'build workshop',\n  // 'solarPanel': 'build solar panels',\n  // 'windmill': 'build windmill',\n  // 'automaticTrashPicker': 'build automatic trash picker',\n  // 'automaticTrashFilter': 'build automatic trash filter',\n  // 'automaticWaterFilter': 'build automatic water filter',\n  // 'automaticAirFilter': 'build automatic air filter',\n  bridge: 'build bridge',\n};\n\nconst actionKeySet = new Set([\n  'pickUpTrash',\n  'buildRecycler',\n  'useRecycler',\n  'buildAirFilter',\n  'buildNet',\n  'useNet',\n  'buildBridge',\n]);\n\nfunction ActionProvider({ children }) {\n  const {\n    addItem, playerItems, playerStructures, setPlayerStructures,\n  } = useContext(InventoryContext);\n  const [currentAction, setCurrentAction] = useState(null);\n  const [availableActions, setAvailableActions] = useState(initialActions);\n  const [playerActionCount, setPlayerActionCount] = useState({});\n  const [environmentLevel, setEnvironmentLevel] = useState(1);\n\n  const addPlayerActionCount = (playerAction) => {\n    if (playerAction in playerActionCount) {\n      setPlayerActionCount({\n        ...playerActionCount,\n        [playerAction]: playerActionCount[playerAction] + 1,\n      });\n    } else {\n      setPlayerActionCount({\n        ...playerActionCount,\n        [playerAction]: 1,\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (!currentAction) {\n      return;\n    }\n\n    try {\n      if (!actionKeySet.has(currentAction)) {\n        throw Error(`Unknown action: ${currentAction}`);\n      }\n\n      switch (currentAction) {\n        case 'pickUpTrash':\n          {\n            const itemName = landTrashItems[Math.floor(Math.random() * landTrashItems.length)];\n            addItem(itemName, 1);\n          }\n          break;\n        case 'buildRecycler':\n          setPlayerStructures({\n            ...playerStructures,\n            recycler: true,\n          });\n          break;\n        case 'useRecycler':\n          break;\n        case 'buildAirFilter':\n          setPlayerStructures({\n            ...playerStructures,\n            airFilter: true,\n          });\n          break;\n        case 'buildNet':\n          setPlayerStructures({\n            ...playerStructures,\n            net: true,\n          });\n          break;\n        case 'useNet':\n          {\n            const itemName = riverTrashItems[\n              Math.floor(Math.random() * riverTrashItems.length)\n            ];\n            addItem(itemName, 1);\n          }\n          break;\n        case 'buildBridge':\n          setPlayerStructures({\n            ...playerStructures,\n            bridge: true,\n          });\n          break;\n        default:\n          throw Error(`Undeveloped action: ${currentAction}`);\n      }\n      addPlayerActionCount(currentAction);\n    } catch (e) {\n      console.log(e);\n    }\n    setCurrentAction(null);\n  }, [currentAction]);\n\n  useEffect(() => {\n    setAvailableActions({\n      pickUpTrash: 'Pick up trash',\n      ...(playerItems.metal > 5\n        && !playerStructures.recycler && { buildRecycler: 'Fix recycler' }),\n      ...(playerItems.trash\n        && playerStructures.recycler && { useRecycler: 'Recycle trash' }),\n      ...(playerItems.plastic > 5\n        && playerItems.wood > 5\n        && !playerStructures.airFilter\n        && playerStructures.recycler && {\n        buildAirFilter: 'Construct air filter',\n      }),\n      ...(playerItems.plastic > 5\n        && !playerStructures.net\n        && playerStructures.airFilter && { buildNet: 'Construct river net' }),\n      ...(playerStructures.net && { useNet: 'Filter river trash' }),\n      ...(playerItems.wood > 10\n        && playerItems.metal > 10\n        && environmentLevel === 4 && { buildBridge: 'Construct a bridge' }),\n    });\n  }, [playerItems, environmentLevel, playerStructures]);\n\n  useEffect(() => {\n    let newEnvironmentLevel = environmentLevel;\n    if (environmentLevel === 1 && playerActionCount.pickUpTrash >= 10) {\n      newEnvironmentLevel = 2;\n    } else if (\n      environmentLevel === 2\n      && playerActionCount.pickUpTrash >= 10\n      && playerStructures.airFilter\n    ) {\n      newEnvironmentLevel = 3;\n    } else if (environmentLevel === 3 && playerActionCount.useNet >= 5) {\n      newEnvironmentLevel = 4;\n    } else if (environmentLevel === 4 && playerStructures.bridge) {\n      newEnvironmentLevel = 5;\n    } else if (environmentLevel === 5 && playerActionCount.pickUpTrash >= 10) {\n      newEnvironmentLevel = 6;\n    } else {\n      return;\n    }\n    setPlayerActionCount({});\n    setEnvironmentLevel(newEnvironmentLevel);\n  }, [playerStructures, environmentLevel, playerActionCount]);\n\n  return (\n    <ActionContext.Provider\n      value={{\n        currentAction,\n        setCurrentAction,\n        availableActions,\n        environmentLevel,\n      }}\n    >\n      {children}\n    </ActionContext.Provider>\n  );\n}\n\nexport { ActionContext, ActionProvider, actionKeySet };\n","import { useContext } from 'react';\nimport { ActionContext } from '../providers/ActionProvider';\nimport '../styles/ActionButton.css';\n\nfunction ActionButton({ actionName, actionText }) {\n  const { setCurrentAction } = useContext(ActionContext);\n\n  return (\n    <button\n      type=\"button\"\n      className=\"buttons shrink-on-hover\"\n      onClick={() => setCurrentAction(actionName)}\n    >\n      {actionText}\n    </button>\n  );\n}\nexport default ActionButton;\n","import { useContext } from 'react';\nimport ActionButton from './ActionButton';\nimport '../styles/ActionButtonGroup.css';\nimport { ActionContext } from '../providers/ActionProvider';\n\nfunction ActionButtonGroup() {\n  const { availableActions } = useContext(ActionContext);\n\n  return (\n    <div className=\"buttons-group\">\n      {Object.entries(availableActions).map(([actionName, actionText]) => (\n        <ActionButton actionName={actionName} actionText={actionText} />\n      ))}\n    </div>\n  );\n}\n\nexport default ActionButtonGroup;\n","import { useContext, useState, useEffect } from 'react';\nimport '../styles/EventLog.css';\nimport { ActionContext, actionKeySet } from '../providers/ActionProvider';\n\nfunction EventLog() {\n  const { currentAction } = useContext(ActionContext);\n  const [eventLog, setEventLog] = useState([]);\n\n  useEffect(() => {\n    if (!currentAction) {\n      return;\n    }\n\n    try {\n      if (!actionKeySet.has(currentAction)) {\n        throw Error(`Unknown action: ${currentAction}`);\n      }\n\n      switch (currentAction) {\n        case 'pickUpTrash':\n          setEventLog(['Some trash from the ground is picked up', ...eventLog]);\n          break;\n        case 'buildRecycler':\n          setEventLog(['The recycler is now operational', ...eventLog]);\n          break;\n        case 'useRecycler':\n          setEventLog([\n            'Some trash is recycled into usable items',\n            ...eventLog,\n          ]);\n          break;\n        case 'buildAirFilterv':\n          setEventLog(['An air filter has been constructed', ...eventLog]);\n          break;\n        case 'buildNet':\n          setEventLog(['A net has been built', ...eventLog]);\n          break;\n        case 'useNet':\n          setEventLog(['Some litter is filtered from the river', ...eventLog]);\n          break;\n        case 'buildBridge':\n          setEventLog(['The river can now be crossed', ...eventLog]);\n          break;\n        default:\n          throw Error(`Undeveloped action: ${currentAction}`);\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  }, [currentAction]);\n\n  return (\n    <div className=\"log\">\n      {eventLog.map((eventText) => (\n        <div>{eventText}</div>\n      ))}\n    </div>\n  );\n}\n\nexport default EventLog;\n","export default __webpack_public_path__ + \"static/media/1.e6b114f3.jpeg\";","export default __webpack_public_path__ + \"static/media/2.e1e3d8fd.jpeg\";","export default __webpack_public_path__ + \"static/media/3.9f993332.jpeg\";","export default __webpack_public_path__ + \"static/media/4.6d634823.jpeg\";","export default __webpack_public_path__ + \"static/media/5.8148bb66.gif\";","export default __webpack_public_path__ + \"static/media/6.2050b749.gif\";","import React, {\n  createContext, useState, useContext, useEffect,\n} from 'react';\nimport { ActionContext } from './ActionProvider';\nimport background1 from '../images/1.jpeg';\nimport background2 from '../images/2.jpeg';\nimport background3 from '../images/3.jpeg';\nimport background4 from '../images/4.jpeg';\nimport background5 from '../images/5.gif';\nimport background6 from '../images/6.gif';\n\nconst BackgroundContext = createContext();\n\nfunction BackgroundProvider({ children }) {\n  const { environmentLevel } = useContext(ActionContext);\n  const [backgroundImage, setBackgroundImage] = useState(background1);\n\n  useEffect(() => {\n    switch (environmentLevel) {\n      case 1:\n        setBackgroundImage(background1);\n        break;\n      case 2:\n        setBackgroundImage(background2);\n        break;\n      case 3:\n        setBackgroundImage(background3);\n        break;\n      case 4:\n        setBackgroundImage(background4);\n        break;\n      case 5:\n        setBackgroundImage(background5);\n        break;\n      case 6:\n        setBackgroundImage(background6);\n        break;\n      default:\n        break;\n    }\n  }, [environmentLevel]);\n\n  return (\n    <BackgroundContext.Provider\n      value={{\n        backgroundImage,\n      }}\n    >\n      {children}\n    </BackgroundContext.Provider>\n  );\n}\n\nexport { BackgroundContext, BackgroundProvider };\n","import { useContext } from 'react';\nimport Inventory from './components/Inventory';\nimport ActionButtonGroup from './components/ActionButtonGroup';\nimport EventLog from './components/EventLog';\nimport { BackgroundContext } from './providers/BackgroundProvider';\nimport './styles/App.css';\n\nfunction App() {\n  const { backgroundImage } = useContext(BackgroundContext);\n  return (\n    <div\n      className=\"app\"\n      style={{\n        backgroundImage: `url(${backgroundImage})`,\n      }}\n    >\n      <div className=\"content\">\n        <EventLog />\n        <ActionButtonGroup />\n        <Inventory />\n      </div>\n    </div>\n  );\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './styles/index.css';\nimport App from './App';\nimport { ActionProvider } from './providers/ActionProvider';\nimport { InventoryProvider } from './providers/InventoryProvider';\nimport { BackgroundProvider } from './providers/BackgroundProvider';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <InventoryProvider>\n      <ActionProvider>\n        <BackgroundProvider>\n          <App />\n        </BackgroundProvider>\n      </ActionProvider>\n    </InventoryProvider>\n  </React.StrictMode>,\n);\n"],"sourceRoot":""}