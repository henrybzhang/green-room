{"version":3,"sources":["providers/InventoryProvider.jsx","providers/ActionProvider.jsx","components/Inventory.jsx","components/ActionButton.jsx","components/ActionButtonGroup.jsx","components/EventLog.jsx","providers/BackgroundProvider.jsx","App.jsx","index.jsx"],"names":["InventoryContext","createContext","InventoryProvider","children","useState","playerItems","setPlayerItems","playerStructures","setPlayerStructures","updateItems","itemChanges","updatedPlayerItems","Object","entries","forEach","itemName","amount","value","useMemo","Provider","ActionContext","initialActions","pickUpTrash","buildingRequirements","recycler","metal","airFilter","wood","net","plastic","bridge","landTrashItems","riverTrashItems","trashRefinedItems","actionKeySet","Set","ActionProvider","useContext","currentAction","setCurrentAction","availableActions","setAvailableActions","playerActionCount","setPlayerActionCount","environmentLevel","setEnvironmentLevel","nextText","setNextText","checkBuildingRequirements","buildingName","missingRequirements","useEffect","has","Error","Math","floor","random","length","newText","playerAction","e","console","log","buildRecycler","trash","useRecycler","buildAirFilter","plantSeeds","buildNet","useNet","buildBridge","newEnvironmentLevel","Inventory","className","map","ActionButton","actionName","actionText","type","onClick","ActionButtonGroup","isVisible","setIsVisible","delayActionButton","setTimeout","clearTimeout","style","transition","visibility","opacity","initialLog","EventLog","eventLog","setEventLog","slice","eventText","index","BackgroundContext","BackgroundProvider","backgroundImage","setBackgroundImage","App","process","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.959f6c73.chunk.js","sourcesContent":["import React, { createContext, useState, useMemo } from 'react';\n\nconst InventoryContext = createContext();\n\nfunction InventoryProvider({ children }) {\n  const [playerItems, setPlayerItems] = useState({});\n  const [playerStructures, setPlayerStructures] = useState({});\n\n  const updateItems = (itemChanges) => {\n    const updatedPlayerItems = { ...playerItems };\n    Object.entries(itemChanges).forEach(([itemName, amount]) => {\n      if (itemName in updatedPlayerItems) {\n        updatedPlayerItems[itemName] += amount;\n      } else {\n        updatedPlayerItems[itemName] = amount;\n      }\n    });\n    setPlayerItems(updatedPlayerItems);\n  };\n\n  const value = useMemo(\n    () => ({\n      playerItems,\n      playerStructures,\n      setPlayerStructures,\n      updateItems,\n    }),\n    [playerItems, playerStructures],\n  );\n\n  return (\n    <InventoryContext.Provider value={value}>\n      {children}\n    </InventoryContext.Provider>\n  );\n}\n\nexport { InventoryContext, InventoryProvider };\n","import React, {\n  createContext,\n  useState,\n  useEffect,\n  useContext,\n  useMemo,\n} from 'react';\nimport { InventoryContext } from './InventoryProvider';\n\nconst ActionContext = createContext();\n\nconst initialActions = {\n  pickUpTrash: 'Pick up trash',\n};\n\n// const buildingRequirements = {\n//   recycler: {\n//     metal: -5,\n//   },\n//   airFilter: {\n//     wood: -5,\n//   },\n//   net: {\n//     plastic: -5,\n//   },\n//   bridge: {\n//     wood: -10,\n//     metal: -10,\n//   },\n// };\nconst buildingRequirements = {\n  recycler: {\n    metal: -1,\n  },\n  airFilter: {\n    wood: -1,\n  },\n  net: {\n    plastic: -1,\n  },\n  bridge: {\n    wood: -1,\n    metal: -1,\n  },\n};\n\nconst landTrashItems = ['trash', 'wood', 'metal', 'plastic'];\nconst riverTrashItems = ['trash', 'plastic'];\nconst trashRefinedItems = ['wood', 'metal', 'plastic'];\n\nconst actionKeySet = new Set([\n  'pickUpTrash',\n  'buildRecycler',\n  'useRecycler',\n  'buildAirFilter',\n  'plantSeeds',\n  'buildNet',\n  'useNet',\n  'buildBridge',\n]);\n\nfunction ActionProvider({ children }) {\n  const {\n    playerItems, updateItems, playerStructures, setPlayerStructures,\n  } = useContext(InventoryContext);\n  const [currentAction, setCurrentAction] = useState(null);\n  const [availableActions, setAvailableActions] = useState(initialActions);\n  const [playerActionCount, setPlayerActionCount] = useState({});\n  const [environmentLevel, setEnvironmentLevel] = useState(1);\n  const [nextText, setNextText] = useState(null);\n\n  const addPlayerActionCount = (playerAction) => {\n    if (playerAction in playerActionCount) {\n      setPlayerActionCount({\n        ...playerActionCount,\n        [playerAction]: playerActionCount[playerAction] + 1,\n      });\n    } else {\n      setPlayerActionCount({\n        ...playerActionCount,\n        [playerAction]: 1,\n      });\n    }\n  };\n\n  const checkBuildingRequirements = (buildingName) => {\n    let missingRequirements = false;\n    Object.entries(buildingRequirements[buildingName]).forEach(\n      ([itemName, amount]) => {\n        if (playerItems[itemName] + amount >= 0) {\n          missingRequirements = true;\n        }\n      },\n    );\n\n    return missingRequirements;\n  };\n\n  useEffect(() => {\n    if (!currentAction) {\n      return;\n    }\n\n    try {\n      if (!actionKeySet.has(currentAction)) {\n        throw Error(`Unknown action: ${currentAction}`);\n      }\n\n      switch (currentAction) {\n        case 'pickUpTrash':\n          {\n            const itemName = landTrashItems[Math.floor(Math.random() * landTrashItems.length)];\n            let newText = 'The surrounding area has been slightly cleared of trash';\n            if (itemName !== 'trash') {\n              newText = `Clearing some trash has provided some useful ${itemName}`;\n            }\n            setNextText(newText);\n            updateItems({ [itemName]: 1 });\n          }\n          break;\n        case 'buildRecycler':\n          setPlayerStructures({\n            ...playerStructures,\n            recycler: true,\n          });\n          setNextText('The recycler is now operational');\n          updateItems(buildingRequirements.recycler);\n          break;\n        case 'useRecycler':\n          {\n            const itemName = trashRefinedItems[\n              Math.floor(Math.random() * trashRefinedItems.length)\n            ];\n            setNextText(`Some ${itemName} has been recycled from trash`);\n            updateItems({ [itemName]: 1, trash: -1 });\n          }\n          break;\n        case 'buildAirFilter':\n          setPlayerStructures({\n            ...playerStructures,\n            airFilter: true,\n          });\n          setNextText('An air filter has begun to reduce the amount of smog in the air');\n          updateItems(buildingRequirements.airFilter);\n          break;\n        case 'plantSeeds':\n          setNextText('The beginnings of new life have been planted');\n          break;\n        case 'buildNet':\n          setPlayerStructures({\n            ...playerStructures,\n            net: true,\n          });\n          setNextText(\n            'Removing trash in the flowing river is now a possibility',\n          );\n          updateItems(buildingRequirements.net);\n          break;\n        case 'useNet':\n          {\n            const itemName = riverTrashItems[\n              Math.floor(Math.random() * riverTrashItems.length)\n            ];\n            updateItems({ [itemName]: 1 });\n            setNextText('Some trash has been taken from the river');\n          }\n          break;\n        case 'buildBridge':\n          setPlayerStructures({\n            ...playerStructures,\n            bridge: true,\n          });\n          updateItems(buildingRequirements.bridge);\n          setNextText('The river can now be crossed');\n          break;\n        default:\n          throw Error(`Undeveloped action: ${currentAction}`);\n      }\n      addPlayerActionCount(currentAction);\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.log(e);\n    }\n    setCurrentAction(null);\n  }, [currentAction, environmentLevel]);\n\n  useEffect(() => {\n    if (environmentLevel === 7) {\n      setAvailableActions({});\n      return;\n    }\n\n    setAvailableActions({\n      ...((environmentLevel <= 2 || environmentLevel === 6) && {\n        pickUpTrash: 'Pick up trash',\n      }),\n      ...(checkBuildingRequirements('recycler')\n        && !playerStructures.recycler && { buildRecycler: 'Fix recycler' }),\n      ...(playerItems.trash\n        && playerStructures.recycler && { useRecycler: 'Recycle trash' }),\n      ...(checkBuildingRequirements('airFilter')\n        && !playerStructures.airFilter\n        && playerStructures.recycler\n        && environmentLevel === 2 && {\n        buildAirFilter: 'Construct air filter',\n      }),\n      ...(environmentLevel === 3 && {\n        plantSeeds: 'Plant seeds',\n      }),\n      ...(checkBuildingRequirements('net')\n        && !playerStructures.net\n        && environmentLevel === 4 && { buildNet: 'Construct river net' }),\n      ...(playerStructures.net\n        && environmentLevel === 4 && { useNet: 'Filter river trash' }),\n      ...(checkBuildingRequirements('bridge')\n        && environmentLevel === 5 && { buildBridge: 'Construct a bridge' }),\n    });\n  }, [playerItems, environmentLevel, playerStructures]);\n\n  useEffect(() => {\n    let newEnvironmentLevel = environmentLevel;\n    if (environmentLevel === 1 && playerActionCount.pickUpTrash >= 10) {\n      newEnvironmentLevel = 2;\n    } else if (\n      environmentLevel === 2\n      && playerActionCount.pickUpTrash >= 10\n      && playerStructures.airFilter\n    ) {\n      newEnvironmentLevel = 3;\n    } else if (environmentLevel === 3 && playerActionCount.plantSeeds) {\n      newEnvironmentLevel = 4;\n    } else if (environmentLevel === 4 && playerActionCount.useNet >= 5) {\n      newEnvironmentLevel = 5;\n    } else if (environmentLevel === 5 && playerStructures.bridge) {\n      newEnvironmentLevel = 6;\n    } else if (environmentLevel === 6 && playerActionCount.pickUpTrash >= 10) {\n      newEnvironmentLevel = 7;\n      setNextText(\n        'The area has been completely cleared of trash and pollution. Nature is finally beginning to recover.',\n      );\n    } else {\n      return;\n    }\n    setPlayerActionCount({});\n    setEnvironmentLevel(newEnvironmentLevel);\n  }, [playerStructures, environmentLevel, playerActionCount]);\n\n  const value = useMemo(\n    () => ({\n      currentAction,\n      environmentLevel,\n      availableActions,\n      nextText,\n      setNextText,\n      setCurrentAction,\n    }),\n    [currentAction, environmentLevel, availableActions, nextText],\n  );\n\n  return (\n    <ActionContext.Provider value={value}>{children}</ActionContext.Provider>\n  );\n}\n\nexport { ActionContext, ActionProvider, actionKeySet };\n","import { useContext } from 'react';\nimport { InventoryContext } from '../providers/InventoryProvider';\nimport { ActionContext } from '../providers/ActionProvider';\nimport '../styles/Inventory.css';\n\nfunction Inventory() {\n  const { playerItems } = useContext(InventoryContext);\n  const { environmentLevel } = useContext(ActionContext);\n\n  return environmentLevel === 7 ? null : (\n    <fieldset className=\"inventory-container\">\n      <legend>Collection</legend>\n      {Object.entries(playerItems).map(([itemName, amount]) => (\n        <div className=\"inventory-item\" key={itemName}>\n          <div>\n            {itemName}\n            :&nbsp;\n          </div>\n          <div className=\"item-count\">{amount}</div>\n        </div>\n      ))}\n    </fieldset>\n  );\n}\n\nexport default Inventory;\n","import { useContext } from 'react';\nimport { ActionContext } from '../providers/ActionProvider';\nimport '../styles/ActionButton.css';\n\nfunction ActionButton({ actionName, actionText }) {\n  const { setCurrentAction } = useContext(ActionContext);\n\n  return (\n    <button\n      type=\"button\"\n      className=\"buttons shrink-on-hover\"\n      onClick={() => setCurrentAction(actionName)}\n    >\n      {actionText}\n    </button>\n  );\n}\nexport default ActionButton;\n","import { useContext, useEffect, useState } from 'react';\nimport ActionButton from './ActionButton';\nimport '../styles/ActionButtonGroup.css';\nimport { ActionContext } from '../providers/ActionProvider';\n\nfunction ActionButtonGroup() {\n  const { availableActions } = useContext(ActionContext);\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    const delayActionButton = setTimeout(() => {\n      setIsVisible(true);\n    }, 2500);\n    return () => clearTimeout(delayActionButton);\n  }, []);\n\n  return (\n    <div\n      className=\"buttons-group\"\n      style={{\n        transition: 'all 2s',\n        visibility: !isVisible ? 'hidden' : 'visible',\n        opacity: !isVisible ? '0' : '1',\n      }}\n    >\n      {Object.entries(availableActions).map(([actionName, actionText]) => (\n        <ActionButton\n          actionName={actionName}\n          actionText={actionText}\n          key={actionName}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default ActionButtonGroup;\n","import { useContext, useState, useEffect } from 'react';\nimport '../styles/EventLog.css';\nimport { ActionContext } from '../providers/ActionProvider';\n\nconst MAX_EVENTS = 20;\n\nconst initialLog = [\n  'The surrounding area is piled high with trash and is extremely polluted. Smog covers the land, making the visibility almost nil.',\n];\n\nfunction EventLog() {\n  const { currentAction, nextText, setNextText } = useContext(ActionContext);\n  const [eventLog, setEventLog] = useState(initialLog);\n\n  useEffect(() => {\n    if (!nextText) {\n      return;\n    }\n\n    console.log(nextText);\n\n    setEventLog([nextText, ...eventLog.slice(0, MAX_EVENTS)]);\n    setNextText(null);\n  }, [nextText]);\n\n  return (\n    <div className=\"log\">\n      {eventLog.map((eventText, index) => (\n        <div\n          style={{\n            opacity: (MAX_EVENTS - index) / MAX_EVENTS,\n          }}\n          // eslint-disable-next-line react/no-array-index-key\n          key={index}\n        >\n          {eventText}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default EventLog;\n","import React, {\n  createContext,\n  useState,\n  useContext,\n  useEffect,\n  useMemo,\n} from 'react';\nimport { ActionContext } from './ActionProvider';\n\nconst BackgroundContext = createContext();\n\nfunction BackgroundProvider({ children }) {\n  const { environmentLevel } = useContext(ActionContext);\n  const [backgroundImage, setBackgroundImage] = useState('1.jpeg');\n\n  useEffect(() => {\n    switch (environmentLevel) {\n      case 1:\n        setBackgroundImage('start.jpeg');\n        break;\n      case 2:\n        setBackgroundImage('initialClear.jpeg');\n        break;\n      case 3:\n        setBackgroundImage('builtAirFilter.jpeg');\n        break;\n      case 4:\n        setBackgroundImage('plantSeeds.jpeg');\n        break;\n      case 5:\n        setBackgroundImage('cleanRiver.jpeg');\n        break;\n      case 6:\n        setBackgroundImage('builtBridge.gif');\n        break;\n      case 7:\n        setBackgroundImage('final.gif');\n        break;\n      default:\n        break;\n    }\n  }, [environmentLevel]);\n\n  const value = useMemo(\n    () => ({\n      backgroundImage,\n    }),\n    [backgroundImage],\n  );\n\n  return (\n    <BackgroundContext.Provider value={value}>\n      {children}\n    </BackgroundContext.Provider>\n  );\n}\n\nexport { BackgroundContext, BackgroundProvider };\n","import { useContext } from 'react';\nimport Inventory from './components/Inventory';\nimport ActionButtonGroup from './components/ActionButtonGroup';\nimport EventLog from './components/EventLog';\nimport { BackgroundContext } from './providers/BackgroundProvider';\nimport './styles/App.css';\n\nfunction App() {\n  const { backgroundImage } = useContext(BackgroundContext);\n  return (\n    <div\n      className=\"app\"\n      style={{\n        // backgroundImage: `url(${backgroundImage})`,\n        backgroundImage: `url(${process.env.PUBLIC_URL}/images/${backgroundImage})`,\n      }}\n    >\n      <div className=\"content\">\n        <EventLog />\n        <ActionButtonGroup />\n        <Inventory />\n      </div>\n    </div>\n  );\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './styles/index.css';\nimport App from './App';\nimport { ActionProvider } from './providers/ActionProvider';\nimport { InventoryProvider } from './providers/InventoryProvider';\nimport { BackgroundProvider } from './providers/BackgroundProvider';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <InventoryProvider>\n      <ActionProvider>\n        <BackgroundProvider>\n          <App />\n        </BackgroundProvider>\n      </ActionProvider>\n    </InventoryProvider>\n  </React.StrictMode>,\n);\n"],"sourceRoot":""}