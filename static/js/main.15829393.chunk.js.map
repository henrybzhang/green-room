{"version":3,"sources":["providers/InventoryProvider.jsx","components/Inventory.jsx","providers/ActionProvider.jsx","components/ActionButton.jsx","components/ActionButtonGroup.jsx","components/EventLog.jsx","images/1.jpeg","images/2.jpeg","images/3.jpeg","images/4.jpeg","images/5.gif","images/6.gif","providers/BackgroundProvider.jsx","App.jsx","index.jsx"],"names":["InventoryContext","createContext","InventoryProvider","children","useState","playerItems","setPlayerItems","playerStructures","setPlayerStructures","updateItems","itemChanges","updatedPlayerItems","Object","entries","forEach","itemName","amount","value","useMemo","Provider","Inventory","useContext","className","map","ActionContext","initialActions","pickUpTrash","buildingRequirements","recycler","metal","airFilter","wood","net","plastic","bridge","landTrashItems","riverTrashItems","trashRefinedItems","actionKeySet","Set","ActionProvider","currentAction","setCurrentAction","availableActions","setAvailableActions","playerActionCount","setPlayerActionCount","environmentLevel","setEnvironmentLevel","checkBuildingRequirements","buildingName","missingRequirements","useEffect","has","Error","Math","floor","random","length","playerAction","e","console","log","buildRecycler","trash","useRecycler","buildAirFilter","buildNet","useNet","buildBridge","newEnvironmentLevel","ActionButton","actionName","actionText","type","onClick","ActionButtonGroup","initialLog","EventLog","eventLog","setEventLog","eventLogToKeep","slice","eventText","index","style","opacity","backgrounds","background1","background2","background3","background4","background5","background6","BackgroundContext","BackgroundProvider","backgroundImage","setBackgroundImage","picture","Image","src","App","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.15829393.chunk.js","sourcesContent":["import React, { createContext, useState, useMemo } from 'react';\n\nconst InventoryContext = createContext();\n\nfunction InventoryProvider({ children }) {\n  const [playerItems, setPlayerItems] = useState({});\n  const [playerStructures, setPlayerStructures] = useState({});\n\n  const updateItems = (itemChanges) => {\n    const updatedPlayerItems = { ...playerItems };\n    Object.entries(itemChanges).forEach(([itemName, amount]) => {\n      if (itemName in updatedPlayerItems) {\n        updatedPlayerItems[itemName] += amount;\n      } else {\n        updatedPlayerItems[itemName] = amount;\n      }\n    });\n    setPlayerItems(updatedPlayerItems);\n  };\n\n  const value = useMemo(\n    () => ({\n      playerItems,\n      playerStructures,\n      setPlayerStructures,\n      updateItems,\n    }),\n    [playerItems, playerStructures],\n  );\n\n  return (\n    <InventoryContext.Provider value={value}>\n      {children}\n    </InventoryContext.Provider>\n  );\n}\n\nexport { InventoryContext, InventoryProvider };\n","import { useContext } from 'react';\nimport { InventoryContext } from '../providers/InventoryProvider';\nimport '../styles/Inventory.css';\n\nfunction Inventory() {\n  const { playerItems } = useContext(InventoryContext);\n\n  return (\n    <fieldset className=\"inventory-container\">\n      <legend>Collection</legend>\n      {Object.entries(playerItems).map(([itemName, amount]) => (\n        <div className=\"inventory-item\" key={itemName}>\n          <div>\n            {itemName}\n            :&nbsp;\n          </div>\n          <div className=\"item-count\">{amount}</div>\n        </div>\n      ))}\n    </fieldset>\n  );\n}\n\nexport default Inventory;\n","import React, {\n  createContext,\n  useState,\n  useEffect,\n  useContext,\n  useMemo,\n} from 'react';\nimport { InventoryContext } from './InventoryProvider';\n\nconst ActionContext = createContext();\n\nconst initialActions = {\n  pickUpTrash: 'Pick up trash',\n};\n\n// const buildingRequirements = {\n//   recycler: {\n//     metal: -5,\n//   },\n//   airFilter: {\n//     wood: -5,\n//   },\n//   net: {\n//     plastic: -5,\n//   },\n//   bridge: {\n//     wood: -10,\n//     metal: -10,\n//   },\n// };\nconst buildingRequirements = {\n  recycler: {\n    metal: -1,\n  },\n  airFilter: {\n    wood: -1,\n  },\n  net: {\n    plastic: -1,\n  },\n  bridge: {\n    wood: -1,\n    metal: -1,\n  },\n};\n\nconst landTrashItems = ['trash', 'wood', 'metal', 'plastic'];\nconst riverTrashItems = ['trash', 'plastic'];\nconst trashRefinedItems = ['wood', 'metal', 'plastic'];\n\nconst actionKeySet = new Set([\n  'pickUpTrash',\n  'buildRecycler',\n  'useRecycler',\n  'buildAirFilter',\n  'buildNet',\n  'useNet',\n  'buildBridge',\n]);\n\nfunction ActionProvider({ children }) {\n  const {\n    playerItems, updateItems, playerStructures, setPlayerStructures,\n  } = useContext(InventoryContext);\n  const [currentAction, setCurrentAction] = useState(null);\n  const [availableActions, setAvailableActions] = useState(initialActions);\n  const [playerActionCount, setPlayerActionCount] = useState({});\n  const [environmentLevel, setEnvironmentLevel] = useState(1);\n\n  const addPlayerActionCount = (playerAction) => {\n    if (playerAction in playerActionCount) {\n      setPlayerActionCount({\n        ...playerActionCount,\n        [playerAction]: playerActionCount[playerAction] + 1,\n      });\n    } else {\n      setPlayerActionCount({\n        ...playerActionCount,\n        [playerAction]: 1,\n      });\n    }\n  };\n\n  const checkBuildingRequirements = (buildingName) => {\n    let missingRequirements = false;\n    Object.entries(buildingRequirements[buildingName]).forEach(\n      ([itemName, amount]) => {\n        if (playerItems[itemName] + amount >= 0) {\n          missingRequirements = true;\n        }\n      },\n    );\n\n    return missingRequirements;\n  };\n\n  useEffect(() => {\n    if (!currentAction) {\n      return;\n    }\n\n    try {\n      if (!actionKeySet.has(currentAction)) {\n        throw Error(`Unknown action: ${currentAction}`);\n      }\n\n      switch (currentAction) {\n        case 'pickUpTrash':\n          {\n            const itemName = landTrashItems[Math.floor(Math.random() * landTrashItems.length)];\n            updateItems({ [itemName]: 1 });\n          }\n          break;\n        case 'buildRecycler':\n          setPlayerStructures({\n            ...playerStructures,\n            recycler: true,\n          });\n          updateItems(buildingRequirements.recycler);\n          break;\n        case 'useRecycler':\n          {\n            const itemName = trashRefinedItems[\n              Math.floor(Math.random() * trashRefinedItems.length)\n            ];\n            updateItems({ [itemName]: 1, trash: -1 });\n          }\n          break;\n        case 'buildAirFilter':\n          setPlayerStructures({\n            ...playerStructures,\n            airFilter: true,\n          });\n          updateItems(buildingRequirements.airFilter);\n          break;\n        case 'buildNet':\n          setPlayerStructures({\n            ...playerStructures,\n            net: true,\n          });\n          updateItems(buildingRequirements.net);\n          break;\n        case 'useNet':\n          {\n            const itemName = riverTrashItems[\n              Math.floor(Math.random() * riverTrashItems.length)\n            ];\n            updateItems({ [itemName]: 1 });\n          }\n          break;\n        case 'buildBridge':\n          setPlayerStructures({\n            ...playerStructures,\n            bridge: true,\n          });\n          updateItems(buildingRequirements.bridge);\n          break;\n        default:\n          throw Error(`Undeveloped action: ${currentAction}`);\n      }\n      addPlayerActionCount(currentAction);\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.log(e);\n    }\n    setCurrentAction(null);\n  }, [currentAction]);\n\n  useEffect(() => {\n    setAvailableActions({\n      pickUpTrash: 'Pick up trash',\n      ...(checkBuildingRequirements('recycler')\n        && !playerStructures.recycler && { buildRecycler: 'Fix recycler' }),\n      ...(playerItems.trash\n        && playerStructures.recycler && { useRecycler: 'Recycle trash' }),\n      ...(checkBuildingRequirements('airFilter')\n        && !playerStructures.airFilter\n        && playerStructures.recycler && {\n        buildAirFilter: 'Construct air filter',\n      }),\n      ...(checkBuildingRequirements('net')\n        && environmentLevel === 3 && { buildNet: 'Construct river net' }),\n      ...(playerStructures.net && { useNet: 'Filter river trash' }),\n      ...(checkBuildingRequirements('bridge')\n        && environmentLevel === 4 && { buildBridge: 'Construct a bridge' }),\n    });\n  }, [playerItems, environmentLevel, playerStructures]);\n\n  useEffect(() => {\n    let newEnvironmentLevel = environmentLevel;\n    if (environmentLevel === 1 && playerActionCount.pickUpTrash >= 10) {\n      newEnvironmentLevel = 2;\n    } else if (\n      environmentLevel === 2\n      && playerActionCount.pickUpTrash >= 10\n      && playerStructures.airFilter\n    ) {\n      newEnvironmentLevel = 3;\n    } else if (environmentLevel === 3 && playerActionCount.useNet >= 5) {\n      newEnvironmentLevel = 4;\n    } else if (environmentLevel === 4 && playerStructures.bridge) {\n      newEnvironmentLevel = 5;\n    } else if (environmentLevel === 5 && playerActionCount.pickUpTrash >= 10) {\n      newEnvironmentLevel = 6;\n    } else {\n      return;\n    }\n    setPlayerActionCount({});\n    setEnvironmentLevel(newEnvironmentLevel);\n  }, [playerStructures, environmentLevel, playerActionCount]);\n\n  const value = useMemo(\n    () => ({\n      currentAction,\n      environmentLevel,\n      availableActions,\n      setCurrentAction,\n    }),\n    [currentAction, environmentLevel, availableActions],\n  );\n\n  return (\n    <ActionContext.Provider value={value}>{children}</ActionContext.Provider>\n  );\n}\n\nexport { ActionContext, ActionProvider, actionKeySet };\n","import { useContext } from 'react';\nimport { ActionContext } from '../providers/ActionProvider';\nimport '../styles/ActionButton.css';\n\nfunction ActionButton({ actionName, actionText }) {\n  const { setCurrentAction } = useContext(ActionContext);\n\n  return (\n    <button\n      type=\"button\"\n      className=\"buttons shrink-on-hover\"\n      onClick={() => setCurrentAction(actionName)}\n    >\n      {actionText}\n    </button>\n  );\n}\nexport default ActionButton;\n","import { useContext } from 'react';\nimport ActionButton from './ActionButton';\nimport '../styles/ActionButtonGroup.css';\nimport { ActionContext } from '../providers/ActionProvider';\n\nfunction ActionButtonGroup() {\n  const { availableActions } = useContext(ActionContext);\n\n  return (\n    <div className=\"buttons-group\">\n      {Object.entries(availableActions).map(([actionName, actionText]) => (\n        <ActionButton\n          actionName={actionName}\n          actionText={actionText}\n          key={actionName}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default ActionButtonGroup;\n","import { useContext, useState, useEffect } from 'react';\nimport '../styles/EventLog.css';\nimport { ActionContext, actionKeySet } from '../providers/ActionProvider';\n\nconst MAX_EVENTS = 20;\n\nconst initialLog = [\n  'The surrounding area is piled high with trash and is extremely polluted. Smog covers the land, making the visibility almost nil.',\n];\n\nfunction EventLog() {\n  const { currentAction } = useContext(ActionContext);\n  const [eventLog, setEventLog] = useState(initialLog);\n\n  useEffect(() => {\n    if (!currentAction) {\n      return;\n    }\n\n    try {\n      if (!actionKeySet.has(currentAction)) {\n        throw Error(`Unknown action: ${currentAction}`);\n      }\n\n      const eventLogToKeep = eventLog.slice(0, MAX_EVENTS);\n\n      switch (currentAction) {\n        case 'pickUpTrash':\n          setEventLog([\n            'The surrounding area has been slightly cleared of trash',\n            ...eventLogToKeep,\n          ]);\n          break;\n        case 'buildRecycler':\n          setEventLog(['The recycler is now operational', ...eventLogToKeep]);\n          break;\n        case 'useRecycler':\n          setEventLog([\n            'Some usable items have been recycled from trash',\n            ...eventLogToKeep,\n          ]);\n          break;\n        case 'buildAirFilter':\n          setEventLog([\n            'An air filter has been constructed',\n            ...eventLogToKeep,\n          ]);\n          break;\n        case 'buildNet':\n          setEventLog(['A net has been built', ...eventLogToKeep]);\n          break;\n        case 'useNet':\n          setEventLog([\n            'Some litter has been filtered from the river',\n            ...eventLogToKeep,\n          ]);\n          break;\n        case 'buildBridge':\n          setEventLog(['The river can now be crossed', ...eventLogToKeep]);\n          break;\n        default:\n          throw Error(`Undeveloped action: ${currentAction}`);\n      }\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.log(e);\n    }\n  }, [currentAction]);\n\n  return (\n    <div className=\"log\">\n      {eventLog.map((eventText, index) => (\n        <div\n          style={{\n            opacity: (MAX_EVENTS - index) / MAX_EVENTS,\n          }}\n          // eslint-disable-next-line react/no-array-index-key\n          key={index}\n        >\n          {eventText}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default EventLog;\n","export default __webpack_public_path__ + \"static/media/1.e6b114f3.jpeg\";","export default __webpack_public_path__ + \"static/media/2.e1e3d8fd.jpeg\";","export default __webpack_public_path__ + \"static/media/3.9f993332.jpeg\";","export default __webpack_public_path__ + \"static/media/4.6d634823.jpeg\";","export default __webpack_public_path__ + \"static/media/5.8148bb66.gif\";","export default __webpack_public_path__ + \"static/media/6.2050b749.gif\";","import React, {\n  createContext,\n  useState,\n  useContext,\n  useEffect,\n  useMemo,\n} from 'react';\nimport { ActionContext } from './ActionProvider';\nimport background1 from '../images/1.jpeg';\nimport background2 from '../images/2.jpeg';\nimport background3 from '../images/3.jpeg';\nimport background4 from '../images/4.jpeg';\nimport background5 from '../images/5.gif';\nimport background6 from '../images/6.gif';\n\nconst backgrounds = [\n  background1,\n  background2,\n  background3,\n  background4,\n  background5,\n  background6,\n];\n\nconst BackgroundContext = createContext();\n\nfunction BackgroundProvider({ children }) {\n  const { environmentLevel } = useContext(ActionContext);\n  const [backgroundImage, setBackgroundImage] = useState(background1);\n\n  useEffect(() => {\n    backgrounds.forEach((picture) => {\n      const img = new Image();\n      img.src = picture;\n    });\n  }, []);\n\n  useEffect(() => {\n    switch (environmentLevel) {\n      case 1:\n        setBackgroundImage(background1);\n        break;\n      case 2:\n        setBackgroundImage(background2);\n        break;\n      case 3:\n        setBackgroundImage(background3);\n        break;\n      case 4:\n        setBackgroundImage(background4);\n        break;\n      case 5:\n        setBackgroundImage(background5);\n        break;\n      case 6:\n        setBackgroundImage(background6);\n        break;\n      default:\n        break;\n    }\n  }, [environmentLevel]);\n\n  const value = useMemo(\n    () => ({\n      backgroundImage,\n    }),\n    [backgroundImage],\n  );\n\n  return (\n    <BackgroundContext.Provider value={value}>\n      {children}\n    </BackgroundContext.Provider>\n  );\n}\n\nexport { BackgroundContext, BackgroundProvider };\n","import { useContext } from 'react';\nimport Inventory from './components/Inventory';\nimport ActionButtonGroup from './components/ActionButtonGroup';\nimport EventLog from './components/EventLog';\nimport { BackgroundContext } from './providers/BackgroundProvider';\nimport './styles/App.css';\n\nfunction App() {\n  const { backgroundImage } = useContext(BackgroundContext);\n  return (\n    <div\n      className=\"app\"\n      style={{\n        backgroundImage: `url(${backgroundImage})`,\n      }}\n    >\n      <div className=\"content\">\n        <EventLog />\n        <ActionButtonGroup />\n        <Inventory />\n      </div>\n    </div>\n  );\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './styles/index.css';\nimport App from './App';\nimport { ActionProvider } from './providers/ActionProvider';\nimport { InventoryProvider } from './providers/InventoryProvider';\nimport { BackgroundProvider } from './providers/BackgroundProvider';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <InventoryProvider>\n      <ActionProvider>\n        <BackgroundProvider>\n          <App />\n        </BackgroundProvider>\n      </ActionProvider>\n    </InventoryProvider>\n  </React.StrictMode>,\n);\n"],"sourceRoot":""}