{"version":3,"sources":["providers/InventoryProvider.jsx","components/Inventory.jsx","images/1.JPG","images/2.JPG","providers/ActionProvider.jsx","components/ActionButton.jsx","components/ActionButtonGroup.jsx","components/EventLog.jsx","App.jsx","index.jsx"],"names":["InventoryContext","createContext","InventoryProvider","children","useState","playerItems","setPlayerItems","playerStructures","setPlayerStructures","Provider","value","addItem","itemName","amount","Inventory","useContext","className","Object","entries","map","ActionContext","initialActions","pickUpTrash","pickUpItems","ActionProvider","currentAction","setCurrentAction","availableActions","setAvailableActions","background1","backgroundImage","setBackgroundImage","playerActionCount","setPlayerActionCount","useEffect","Math","floor","random","length","recycler","background2","Error","addPlayerActionCount","e","playerAction","fixRecycler","trash","useRecycler","ActionButton","actionName","actionText","type","onClick","ActionButtonGroup","actionMap","EventLog","eventLog","setEventLog","eventText","App","console","log","style","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.ef77b3c5.chunk.js","sourcesContent":["import React, { createContext, useState } from 'react';\n\nconst InventoryContext = createContext();\n\nfunction InventoryProvider({ children }) {\n  const [playerItems, setPlayerItems] = useState({});\n\n  const [playerStructures, setPlayerStructures] = useState({});\n\n  const addItem = (itemName, amount) => {\n    if (itemName in playerItems) {\n      setPlayerItems({\n        ...playerItems,\n        [itemName]: playerItems[itemName] + amount,\n      });\n    } else {\n      setPlayerItems({\n        ...playerItems,\n        [itemName]: amount,\n      });\n    }\n  };\n\n  return (\n    <InventoryContext.Provider\n      value={{\n        playerItems,\n        playerStructures,\n        setPlayerStructures,\n        addItem,\n      }}\n    >\n      {children}\n    </InventoryContext.Provider>\n  );\n}\n\nexport { InventoryContext, InventoryProvider };\n","import { useContext } from 'react';\nimport { InventoryContext } from '../providers/InventoryProvider';\nimport '../styles/Inventory.css';\n\nfunction Inventory() {\n  const { playerItems } = useContext(InventoryContext);\n\n  return (\n    <fieldset className=\"invent\">\n      <legend>Collection</legend>\n      {Object.entries(playerItems).map(([itemName, amount]) => (\n        <div className='invent-items'>\n          <div>\n            {itemName}\n            :&nbsp;\n          </div>\n          <div className='invent-item-two'>\n            {amount}\n          </div> \n        </div>\n      ))}\n    </fieldset>\n  );\n}\n\nexport default Inventory;\n","export default __webpack_public_path__ + \"static/media/1.66ddb223.JPG\";","export default __webpack_public_path__ + \"static/media/2.8959fc90.JPG\";","import React, {\n  createContext, useState, useEffect, useContext,\n} from 'react';\nimport { InventoryContext } from './InventoryProvider';\nimport background1 from '../images/1.JPG';\nimport background2 from '../images/2.JPG';\n\nconst ActionContext = createContext();\n\nconst initialActions = {\n  pickUpTrash: 'Pick up trash',\n};\n\nconst pickUpItems = ['trash', 'wood', 'metal', 'plastic'];\n\nconst buildActions = {\n  recycler: 'Fix recycler',\n  net: 'build net',\n  waterFilter: 'build waterFilter',\n  airFilter: 'build airFilter',\n  // 'workshop': 'build workshop',\n  // 'solarPanel': 'build solar panels',\n  // 'windmill': 'build windmill',\n  // 'automaticTrashPicker': 'build automatic trash picker',\n  // 'automaticTrashFilter': 'build automatic trash filter',\n  // 'automaticWaterFilter': 'build automatic water filter',\n  // 'automaticAirFilter': 'build automatic air filter',\n  bridge: 'build bridge',\n};\n\nfunction ActionProvider({ children }) {\n  const {\n    addItem, playerItems, playerStructures, setPlayerStructures,\n  } = useContext(InventoryContext);\n  const [currentAction, setCurrentAction] = useState(null);\n  const [availableActions, setAvailableActions] = useState(initialActions);\n  const [backgroundImage, setBackgroundImage] = useState(background1);\n\n  const [playerActionCount, setPlayerActionCount] = useState({});\n\n  useEffect(() => {\n    if (!currentAction) {\n      return;\n    }\n\n    try {\n      switch (currentAction) {\n        case 'pickUpTrash':\n          {\n            const itemName = pickUpItems[Math.floor(Math.random() * pickUpItems.length)];\n            addItem(itemName, 1);\n          }\n          break;\n        case 'filterRiver':\n          addItem('wood', 1);\n          break;\n        case 'fixRecycler':\n          setPlayerStructures({\n            ...playerStructures,\n            recycler: true,\n          });\n          setBackgroundImage(background2);\n          break;\n        case 'useRecycler':\n          break;\n        default:\n          throw Error(`Unknown action: ${currentAction}`);\n      }\n      addPlayerActionCount(currentAction);\n    } catch (e) {}\n    setCurrentAction(null);\n  }, [currentAction]);\n\n  const addPlayerActionCount = (playerAction) => {\n    if (playerAction in playerActionCount) {\n      setPlayerActionCount({\n        ...playerActionCount,\n        [playerAction]: playerActionCount[playerAction] + 1,\n      });\n    } else {\n      setPlayerActionCount({\n        ...playerActionCount,\n        [playerAction]: 1,\n      });\n    }\n  };\n\n  useEffect(() => {\n    setAvailableActions({\n      pickUpTrash: 'Pick up trash',\n      ...(playerActionCount.pickUpTrash >= 10\n        && !playerStructures.recycler && { fixRecycler: 'Fix recycler' }),\n      ...(playerItems.trash\n        && playerStructures.recycler && { useRecycler: 'Recycle trash' }),\n    });\n  }, [playerItems, playerActionCount, playerStructures]);\n\n  return (\n    <ActionContext.Provider\n      value={{\n        currentAction,\n        setCurrentAction,\n        availableActions,\n        backgroundImage,\n      }}\n    >\n      {children}\n    </ActionContext.Provider>\n  );\n}\n\nexport { ActionContext, ActionProvider };\n","import { useContext } from 'react';\nimport { ActionContext } from '../providers/ActionProvider';\nimport '../styles/ActionButton.css';\n\nfunction ActionButton({ actionName, actionText }) {\n  const { setCurrentAction } = useContext(ActionContext);\n\n  return (\n    <button\n      type=\"button\"\n      className=\"buttons shrink-on-hover\"\n      onClick={() => setCurrentAction(actionName)}\n    >\n      {actionText}\n    </button>\n  );\n}\nexport default ActionButton;\n","import ActionButton from './ActionButton';\nimport '../styles/ActionButtonGroup.css';\n\nfunction ActionButtonGroup({ actionMap }) {\n  return (\n    <div className=\"buttons-group\">\n      {Object.entries(actionMap).map(([actionName, actionText]) => (\n        <ActionButton actionName={actionName} actionText={actionText} />\n      ))}\n    </div>\n  );\n}\n\nexport default ActionButtonGroup;\n","import { useContext, useState, useEffect } from 'react';\nimport '../styles/EventLog.css';\nimport { ActionContext } from '../providers/ActionProvider';\n\nfunction EventLog() {\n  const { currentAction } = useContext(ActionContext);\n  const [eventLog, setEventLog] = useState([]);\n\n  useEffect(() => {\n    if (!currentAction) {\n      return;\n    }\n\n    switch (currentAction) {\n      case 'pickUpTrash':\n        setEventLog(['Some trash from the ground is picked up', ...eventLog]);\n        break;\n      case 'filterRiver':\n        setEventLog(['Some litter is filtered from the river', ...eventLog]);\n        break;\n      case 'fixRecycler':\n        setEventLog(['The recycler is now operational', ...eventLog]);\n        break;\n      case 'useRecycler':\n        setEventLog(['Some trash is recycled into usable items', ...eventLog]);\n        break;\n      default:\n        break;\n    }\n  }, [currentAction]);\n\n  return (\n    <div className=\"log\">\n      {eventLog.map((eventText) => (\n        <div>{eventText}</div>\n      ))}\n    </div>\n  );\n}\n\nexport default EventLog;\n","import { useContext } from 'react';\nimport Inventory from './components/Inventory';\nimport ActionButtonGroup from './components/ActionButtonGroup';\nimport EventLog from './components/EventLog';\nimport { ActionContext } from './providers/ActionProvider';\nimport './styles/App.css';\n\nfunction App() {\n  const { availableActions, backgroundImage } = useContext(ActionContext);\n  console.log('availableActions', availableActions);\n  return (\n    <div\n      className=\"app\"\n      style={{\n        backgroundImage: `url(${backgroundImage})`,\n      }}\n    >\n      <div className=\"content\">\n        <EventLog />\n        <ActionButtonGroup actionMap={availableActions} />\n        <Inventory />\n      </div>\n    </div>\n  );\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './styles/index.css';\nimport App from './App';\nimport { ActionProvider } from './providers/ActionProvider';\nimport { InventoryProvider } from './providers/InventoryProvider';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <InventoryProvider>\n      <ActionProvider>\n        <App />\n      </ActionProvider>\n    </InventoryProvider>\n  </React.StrictMode>,\n);\n"],"sourceRoot":""}