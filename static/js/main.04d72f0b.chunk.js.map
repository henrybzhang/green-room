{"version":3,"sources":["providers/InventoryProvider.jsx","providers/DebugProvider.jsx","providers/ActionProvider.jsx","components/Inventory.jsx","components/ActionButton.jsx","components/ActionButtonGroup.jsx","components/EventLog.jsx","providers/BackgroundProvider.jsx","App.jsx","index.jsx"],"names":["InventoryContext","createContext","InventoryProvider","children","useState","playerItems","setPlayerItems","playerStructures","setPlayerStructures","updateItems","itemChanges","updatedPlayerItems","Object","entries","forEach","itemName","amount","value","useMemo","Provider","DebugContext","DebugProvider","debug","setDebug","ActionContext","initialActions","pickUpTrash","prodbuildingRequirements","recycler","metal","airFilter","wood","plastic","net","bridge","debugbuildingRequirements","landTrashItems","riverTrashItems","trashRefinedItems","actionKeySet","Set","ActionProvider","useContext","currentAction","setCurrentAction","availableActions","setAvailableActions","playerActionCount","setPlayerActionCount","environmentLevel","setEnvironmentLevel","nextText","setNextText","buildingRequirements","hasBuildingRequirements","buildingName","hasRequirements","useEffect","has","Error","Math","floor","random","length","newText","playerAction","e","console","log","buildRecycler","trash","useRecycler","buildAirFilter","plantSeeds","buildNet","useNet","buildBridge","newEnvironmentLevel","Inventory","className","map","ActionButton","actionName","actionText","isLoading","setIsLoading","type","onClick","setTimeout","disabled","ActionButtonGroup","isVisible","setIsVisible","delayActionButton","clearTimeout","style","transition","visibility","opacity","initialLog","EventLog","eventLog","setEventLog","eventLogToKeep","eventText","index","BackgroundContext","BackgroundProvider","backgroundImage","setBackgroundImage","App","process","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.04d72f0b.chunk.js","sourcesContent":["import React, { createContext, useState, useMemo } from 'react';\n\nconst InventoryContext = createContext();\n\nfunction InventoryProvider({ children }) {\n  const [playerItems, setPlayerItems] = useState({});\n  const [playerStructures, setPlayerStructures] = useState({});\n\n  const updateItems = (itemChanges) => {\n    const updatedPlayerItems = { ...playerItems };\n    Object.entries(itemChanges).forEach(([itemName, amount]) => {\n      if (itemName in updatedPlayerItems) {\n        updatedPlayerItems[itemName] += amount;\n      } else {\n        updatedPlayerItems[itemName] = amount;\n      }\n    });\n    setPlayerItems(updatedPlayerItems);\n  };\n\n  const value = useMemo(\n    () => ({\n      playerItems,\n      playerStructures,\n      setPlayerStructures,\n      updateItems,\n    }),\n    [playerItems, playerStructures],\n  );\n\n  return (\n    <InventoryContext.Provider value={value}>\n      {children}\n    </InventoryContext.Provider>\n  );\n}\n\nexport { InventoryContext, InventoryProvider };\n","import React, { createContext, useState, useMemo } from 'react';\n\nconst DebugContext = createContext();\n\nfunction DebugProvider({ children }) {\n  const [debug, setDebug] = useState(false);\n  const value = useMemo(\n    () => ({\n      debug,\n      setDebug,\n    }),\n    [debug],\n  );\n\n  return (\n    <DebugContext.Provider value={value}>{children}</DebugContext.Provider>\n  );\n}\n\nexport { DebugContext, DebugProvider };\n","import React, {\n  createContext,\n  useState,\n  useEffect,\n  useContext,\n  useMemo,\n} from 'react';\nimport { DebugContext } from './DebugProvider';\nimport { InventoryContext } from './InventoryProvider';\n\nconst ActionContext = createContext();\n\nconst initialActions = {\n  pickUpTrash: 'Pick up trash',\n};\n\nconst prodbuildingRequirements = {\n  recycler: {\n    metal: -2,\n  },\n  airFilter: {\n    wood: -2,\n    plastic: -2,\n  },\n  net: {\n    plastic: -2,\n  },\n  bridge: {\n    wood: -5,\n    metal: -5,\n  },\n};\nconst debugbuildingRequirements = {\n  recycler: {\n    metal: -1,\n  },\n  airFilter: {\n    wood: -1,\n    plastic: -1,\n  },\n  net: {\n    plastic: -1,\n  },\n  bridge: {\n    wood: -1,\n    metal: -1,\n  },\n};\n\nconst landTrashItems = ['trash', 'wood', 'metal', 'plastic'];\nconst riverTrashItems = ['trash', 'plastic'];\nconst trashRefinedItems = ['wood', 'metal', 'plastic'];\n\nconst actionKeySet = new Set([\n  'pickUpTrash',\n  'buildRecycler',\n  'useRecycler',\n  'buildAirFilter',\n  'plantSeeds',\n  'buildNet',\n  'useNet',\n  'buildBridge',\n]);\n\nfunction ActionProvider({ children }) {\n  const {\n    playerItems, updateItems, playerStructures, setPlayerStructures,\n  } = useContext(InventoryContext);\n  const { debug } = useContext(DebugContext);\n  const [currentAction, setCurrentAction] = useState(null);\n  const [availableActions, setAvailableActions] = useState(initialActions);\n  const [playerActionCount, setPlayerActionCount] = useState({});\n  const [environmentLevel, setEnvironmentLevel] = useState(1);\n  const [nextText, setNextText] = useState(null);\n\n  const buildingRequirements = debug\n    ? debugbuildingRequirements\n    : prodbuildingRequirements;\n\n  const addPlayerActionCount = (playerAction) => {\n    if (playerAction in playerActionCount) {\n      setPlayerActionCount({\n        ...playerActionCount,\n        [playerAction]: playerActionCount[playerAction] + 1,\n      });\n    } else {\n      setPlayerActionCount({\n        ...playerActionCount,\n        [playerAction]: 1,\n      });\n    }\n  };\n\n  const hasBuildingRequirements = (buildingName) => {\n    let hasRequirements = true;\n    Object.entries(buildingRequirements[buildingName]).forEach(\n      ([itemName, amount]) => {\n        if (!playerItems[itemName] || playerItems[itemName] + amount < 0) {\n          hasRequirements = false;\n        }\n      },\n    );\n\n    return hasRequirements;\n  };\n\n  useEffect(() => {\n    if (!currentAction) {\n      return;\n    }\n\n    try {\n      if (!actionKeySet.has(currentAction)) {\n        throw Error(`Unknown action: ${currentAction}`);\n      }\n\n      switch (currentAction) {\n        case 'pickUpTrash':\n          {\n            const itemName = landTrashItems[Math.floor(Math.random() * landTrashItems.length)];\n            let newText = 'The surrounding area has been slightly cleared of trash';\n            if (itemName !== 'trash') {\n              newText = `Clearing some trash has provided some useful ${itemName}`;\n            }\n            setNextText(newText);\n            updateItems({ [itemName]: 1 });\n          }\n          break;\n        case 'buildRecycler':\n          setPlayerStructures({\n            ...playerStructures,\n            recycler: true,\n          });\n          setNextText('The recycler is now operational');\n          updateItems(buildingRequirements.recycler);\n          break;\n        case 'useRecycler':\n          {\n            const itemName = trashRefinedItems[\n              Math.floor(Math.random() * trashRefinedItems.length)\n            ];\n            setNextText(`Some ${itemName} has been recycled from trash`);\n            updateItems({ [itemName]: 1, trash: -1 });\n          }\n          break;\n        case 'buildAirFilter':\n          setPlayerStructures({\n            ...playerStructures,\n            airFilter: true,\n          });\n          setNextText(\n            'An air filter has begun to reduce the amount of smog in the air',\n          );\n          updateItems(buildingRequirements.airFilter);\n          break;\n        case 'plantSeeds':\n          setNextText('The beginnings of new life have been planted');\n          break;\n        case 'buildNet':\n          setPlayerStructures({\n            ...playerStructures,\n            net: true,\n          });\n          setNextText(\n            'Removing trash from the disgusting river is now a possibility',\n          );\n          updateItems(buildingRequirements.net);\n          break;\n        case 'useNet':\n          {\n            const itemName = riverTrashItems[\n              Math.floor(Math.random() * riverTrashItems.length)\n            ];\n            updateItems({ [itemName]: 1 });\n            setNextText(`Some ${itemName} has been removed from the river`);\n          }\n          break;\n        case 'buildBridge':\n          setPlayerStructures({\n            ...playerStructures,\n            bridge: true,\n          });\n          updateItems(buildingRequirements.bridge);\n          setNextText('The river can now be crossed');\n          break;\n        default:\n          throw Error(`Undeveloped action: ${currentAction}`);\n      }\n      addPlayerActionCount(currentAction);\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.log(e);\n    }\n    setCurrentAction(null);\n  }, [currentAction, environmentLevel]);\n\n  useEffect(() => {\n    if (environmentLevel === 7) {\n      setAvailableActions({});\n      return;\n    }\n\n    setAvailableActions({\n      pickUpTrash: 'Pick up trash',\n      ...(hasBuildingRequirements('recycler')\n        && !playerStructures.recycler && { buildRecycler: 'Fix recycler' }),\n      ...(playerItems.trash\n        && playerStructures.recycler && { useRecycler: 'Recycle trash' }),\n      ...(hasBuildingRequirements('airFilter')\n        && !playerStructures.airFilter\n        && playerStructures.recycler\n        && environmentLevel === 2 && {\n        buildAirFilter: 'Construct air filter',\n      }),\n      ...(environmentLevel === 3 && {\n        plantSeeds: 'Plant seeds',\n      }),\n      ...(hasBuildingRequirements('net')\n        && !playerStructures.net\n        && environmentLevel === 4 && { buildNet: 'Construct river net' }),\n      ...(playerStructures.net\n        && environmentLevel === 4 && { useNet: 'Filter river trash' }),\n      ...(hasBuildingRequirements('bridge')\n        && environmentLevel === 5 && { buildBridge: 'Construct a bridge' }),\n    });\n  }, [playerItems, environmentLevel, playerStructures]);\n\n  useEffect(() => {\n    let newEnvironmentLevel = environmentLevel;\n    if (environmentLevel === 1 && playerActionCount.pickUpTrash >= 3) {\n      newEnvironmentLevel = 2;\n      setNextText('Clearing trash has provided some breathing room');\n    } else if (\n      environmentLevel === 2\n      && playerActionCount.pickUpTrash >= 3\n      && playerStructures.airFilter\n    ) {\n      newEnvironmentLevel = 3;\n      setNextText('This side of the river has been cleared of trash');\n    } else if (environmentLevel === 3 && playerActionCount.plantSeeds) {\n      newEnvironmentLevel = 4;\n    } else if (environmentLevel === 4 && playerActionCount.useNet >= 3) {\n      setNextText('The river now looks like a river again');\n      newEnvironmentLevel = 5;\n    } else if (environmentLevel === 5 && playerStructures.bridge) {\n      newEnvironmentLevel = 6;\n    } else if (environmentLevel === 6 && playerActionCount.pickUpTrash >= 3) {\n      newEnvironmentLevel = 7;\n      setNextText(\n        'The area has been completely cleared of trash and pollution. Nature is finally beginning to recover.',\n      );\n    } else {\n      return;\n    }\n    setPlayerActionCount({});\n    setEnvironmentLevel(newEnvironmentLevel);\n  }, [playerStructures, environmentLevel, playerActionCount]);\n\n  const value = useMemo(\n    () => ({\n      currentAction,\n      environmentLevel,\n      availableActions,\n      nextText,\n      setNextText,\n      setCurrentAction,\n    }),\n    [currentAction, environmentLevel, availableActions, nextText],\n  );\n\n  return (\n    <ActionContext.Provider value={value}>{children}</ActionContext.Provider>\n  );\n}\n\nexport { ActionContext, ActionProvider, actionKeySet };\n","import { useContext } from 'react';\nimport { InventoryContext } from '../providers/InventoryProvider';\nimport { ActionContext } from '../providers/ActionProvider';\nimport '../styles/Inventory.css';\n\nfunction Inventory() {\n  const { playerItems } = useContext(InventoryContext);\n  const { environmentLevel } = useContext(ActionContext);\n\n  return environmentLevel === 7 ? null : (\n    <fieldset className=\"inventory-container\">\n      <legend>Collection</legend>\n      {Object.entries(playerItems).map(([itemName, amount]) => (\n        <div className=\"inventory-item\" key={itemName}>\n          <div>\n            {itemName}\n            :&nbsp;\n          </div>\n          <div className=\"item-count\">{amount}</div>\n        </div>\n      ))}\n    </fieldset>\n  );\n}\n\nexport default Inventory;\n","import { useContext, useState } from 'react';\nimport { ActionContext } from '../providers/ActionProvider';\nimport { DebugContext } from '../providers/DebugProvider';\nimport '../styles/ActionButton.css';\n\nfunction ActionButton({ actionName, actionText }) {\n  const { setCurrentAction } = useContext(ActionContext);\n  const { debug } = useContext(DebugContext);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const onClick = () => {\n    setIsLoading(true);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, 1000);\n  };\n\n  return (\n    <button\n      type=\"button\"\n      className={`buttons ${isLoading ? 'disabled' : 'shrink-on-hover'}`}\n      onClick={() => {\n        if (!debug) {\n          onClick();\n        }\n        setCurrentAction(actionName);\n      }}\n      disabled={isLoading}\n    >\n      {actionText}\n    </button>\n  );\n}\nexport default ActionButton;\n","import { useContext, useEffect, useState } from 'react';\nimport ActionButton from './ActionButton';\nimport '../styles/ActionButtonGroup.css';\nimport { ActionContext } from '../providers/ActionProvider';\n\nfunction ActionButtonGroup() {\n  const { availableActions } = useContext(ActionContext);\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    const delayActionButton = setTimeout(() => {\n      setIsVisible(true);\n    }, 2500);\n    return () => clearTimeout(delayActionButton);\n  }, []);\n\n  return (\n    <div\n      className=\"buttons-group\"\n      style={{\n        transition: 'all 2s',\n        visibility: !isVisible ? 'hidden' : 'visible',\n        opacity: !isVisible ? '0' : '1',\n      }}\n    >\n      {Object.entries(availableActions).map(([actionName, actionText]) => (\n        <ActionButton\n          actionName={actionName}\n          actionText={actionText}\n          key={actionName}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default ActionButtonGroup;\n","import { useContext, useState, useEffect } from 'react';\nimport '../styles/EventLog.css';\nimport { ActionContext } from '../providers/ActionProvider';\n\nconst initialLog = [\n  'Welcome to a recovering world',\n  'The surrounding area is piled high with trash and is extremely polluted. Smog covers the land, making the visibility almost nil.',\n];\n\nfunction EventLog() {\n  const { nextText, setNextText, environmentLevel } = useContext(ActionContext);\n  const [eventLog, setEventLog] = useState(initialLog);\n\n  useEffect(() => {\n    if (!nextText) {\n      return;\n    }\n\n    let eventLogToKeep = eventLog;\n    if (environmentLevel === 7) {\n      eventLogToKeep = [];\n    }\n\n    setEventLog([nextText, ...eventLogToKeep]);\n    setNextText(null);\n  }, [nextText]);\n\n  return (\n    <div className=\"log\">\n      {eventLog.map((eventText, index) => (\n        <div\n          // eslint-disable-next-line react/no-array-index-key\n          key={index}\n        >\n          {eventText}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default EventLog;\n","import React, {\n  createContext,\n  useState,\n  useContext,\n  useEffect,\n  useMemo,\n} from 'react';\nimport { ActionContext } from './ActionProvider';\n\nconst BackgroundContext = createContext();\n\nfunction BackgroundProvider({ children }) {\n  const { environmentLevel } = useContext(ActionContext);\n  const [backgroundImage, setBackgroundImage] = useState('1.jpeg');\n\n  useEffect(() => {\n    switch (environmentLevel) {\n      case 1:\n        setBackgroundImage('start.jpeg');\n        break;\n      case 2:\n        setBackgroundImage('initialClear.jpeg');\n        break;\n      case 3:\n        setBackgroundImage('builtAirFilter.jpeg');\n        break;\n      case 4:\n        setBackgroundImage('plantSeeds.jpeg');\n        break;\n      case 5:\n        setBackgroundImage('cleanRiver.jpeg');\n        break;\n      case 6:\n        setBackgroundImage('builtBridge.gif');\n        break;\n      case 7:\n        setBackgroundImage('final.gif');\n        break;\n      default:\n        break;\n    }\n  }, [environmentLevel]);\n\n  const value = useMemo(\n    () => ({\n      backgroundImage,\n    }),\n    [backgroundImage],\n  );\n\n  return (\n    <BackgroundContext.Provider value={value}>\n      {children}\n    </BackgroundContext.Provider>\n  );\n}\n\nexport { BackgroundContext, BackgroundProvider };\n","import { useContext } from 'react';\nimport Inventory from './components/Inventory';\nimport ActionButtonGroup from './components/ActionButtonGroup';\nimport EventLog from './components/EventLog';\nimport { BackgroundContext } from './providers/BackgroundProvider';\nimport { DebugContext } from './providers/DebugProvider';\nimport './styles/App.css';\n\nfunction App() {\n  const { backgroundImage } = useContext(BackgroundContext);\n  const { setDebug, debug } = useContext(DebugContext);\n  return (\n    <div\n      className=\"app\"\n      style={{\n        // backgroundImage: `url(${backgroundImage})`,\n        backgroundImage: `url(${process.env.PUBLIC_URL}/images/${backgroundImage})`,\n      }}\n    >\n      <button type=\"button\" className=\"debug\" onClick={() => setDebug(!debug)}>\n        Debug\n      </button>\n      <div className=\"content\">\n        <EventLog />\n        <ActionButtonGroup />\n        <Inventory />\n      </div>\n    </div>\n  );\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './styles/index.css';\nimport App from './App';\nimport { ActionProvider } from './providers/ActionProvider';\nimport { InventoryProvider } from './providers/InventoryProvider';\nimport { BackgroundProvider } from './providers/BackgroundProvider';\nimport { DebugProvider } from './providers/DebugProvider';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <DebugProvider>\n      <InventoryProvider>\n        <ActionProvider>\n          <BackgroundProvider>\n            <App />\n          </BackgroundProvider>\n        </ActionProvider>\n      </InventoryProvider>\n    </DebugProvider>\n  </React.StrictMode>,\n);\n"],"sourceRoot":""}